- Having too many elements in the DataStream can lead to memory overload on the Arduino. Results in strange behavior, such as garbage output or forgetting functions.
- Trying to access data in an empty DataStream will cause undefined behavior. Because they are template classes, we don't know how to handle an lack of data for an undefined type.
- Using pointers as the data type for a DataStream may create a memory leak. Use the "manually_update_next" function to avoid the problem. This allows you to update an object in place without replacing it. This problem couldn't be fixed because the DataStream class doesn't know what type the data are (eg. int, float, pointer). Even if the data are pointers, the DataStream class doesn't know how an object was created and therefore doesn't know how to destroy them. Returning the old data to be destroyed wasn't working for some reason either.
- We haven't implemented too much in way of error checking because it seemed more useful at this stage to try and implement as much as possible and test the most common cases. Not to mention, there really aren't any boundary cases to test which could crash the program. Data from the sensor only comes in a particular, well-defined range. There isn't much opportunity for a human or nature to enter bad data in our system. (Excluding catastrophic events, like floods and hammers. Our system isn't built to handle that.)
